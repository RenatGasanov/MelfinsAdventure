require("dotenv").config();
const { Bot, GrammyError, HttpError, Keyboard, InputFile } = require("grammy");
const bot = new Bot(process.env.BOT_API_KEY);

const regexMat = /(–±–ª—è|—Å—É–∫–∞|–ø–∏–∑–¥–∞|–ø–∏–∑–¥–µ—Ü|–µ–±–∞—Ç—å|–Ω–∞—Ö—É–π|—Ö—É–π|—É–µ–±–∞–∫|—É–µ–±–∏—â–µ|–®–∞—Ä–∏—Ñ|–ø–∏–¥–∞—Ä–∞—Å|–ø–∏–¥–æ—Ä|–±–ª—è–¥—å|–±–ª—è—Ç—å)/i;
const text = require("./text.js");
const picture0 = new InputFile("./pictures/picture0.png"),
picture1 = new InputFile("./pictures/picture1.png"),
picture2 = new InputFile("./pictures/picture2.png"),
picture3 = new InputFile("./pictures/picture3.png"),
picture4 = new InputFile("./pictures/picture4.png"),
picture5 = new InputFile("./pictures/picture5.png"),
picture6 = new InputFile("./pictures/picture6.png"),
picture7 = new InputFile("./pictures/picture7.png"),
picture8 = new InputFile("./pictures/picture8.png"),
picture9 = new InputFile("./pictures/picture9.png"),
picture10 = new InputFile("./pictures/picture10.png");

let objCarmaPoints = {}; // –æ—á–∫–∏ –∫–∞—Ä–º—ã –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø–µ: –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—ä–µ–∫—Ç —Å–≤–æ–π—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–∞ —á–∞—Ç–∞ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 0
let objBag = {}; // –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—ä–µ–∫—Ç —Å–≤–æ–π—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–∞ —á–∞—Ç–∞ —Å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º, –∑–∞—Ç–µ–º –≤ –Ω–µ–≥–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤–µ—â–∏ (—Å—Ç—Ä–∏–Ω–≥–∏)

bot.api.setMyCommands([
    { command: "start", description: "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É" },
    { command: "bag", description: "–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ —Å–µ–π—á–∞—Å –≤ —Å—É–º–∫–µ " },
]);

bot.catch((err) => {
    const ctx = err.ctx; //–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª
    console.error(`Error while handling update ${ctx.update.update_id}:`);
    const e = err.error;
    if (e instanceof GrammyError) {
        console.error("Error in request:", e.description);
    } else if (e instanceof HttpError) {
        console.error("Could not contact Telegram:", e);
    } else {
        console.error("Unknown error:", e);
    }
});

bot.command("start", async (ctx) => {    
    objCarmaPoints[ctx.chatId] = 0;
    objBag[ctx.chatId] = [];
    console.log('carmaPoints on start : ',objCarmaPoints);
    console.log('Bag on start: ',objBag);
    
    const keyboardStart = new Keyboard().text(text.buttonStageStartText).resized();
    await ctx.reply(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç ü§ñ - –∏–≥—Ä–∞. –í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã —Å–º–æ–∂–µ—à—å –æ–∫—É–Ω—É—Ç—å—Å—è –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ú–µ–ª—Ñ–∏. \n –ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É/–±–æ—Ç–∞, —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å /start –∏–ª–∏ –Ω–∞–∂–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞ –æ—Ç –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.\n –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—É–º–∫–µ - –Ω–∞–∂–º–∏ /bag. –ù—É —á—Ç–æ, –¢—ã –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ???\n \n–ù–∞–∂–º–∏ –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å :)",
        { reply_markup: keyboardStart }
    );
});

bot.command("bag", async (ctx) => {
    const chatId = ctx.chatId;
    if (objBag[chatId].length == 0) {
        await ctx.reply(`–°–µ–π—á–∞—Å –≤ —Å—É–º–∫–µ üëú –Ω–∏—á–µ–≥–æ –Ω–µ –ª–µ–∂–∏—Ç üòî`);
    } else await ctx.reply(`–°–µ–π—á–∞—Å –≤ —Å—É–º–∫–µ üëú –ª–µ–∂–∏—Ç :`);
    for (let i = 0; i < objBag[chatId].length; i++) {
        await ctx.reply(`${i + 1}) ${objBag[chatId][i]}`);
    }
});

bot.hears(regexMat, async (ctx) => {
    await ctx.reply("–¢–∞–∫ —Ç–∞–∫ —Ç–∞–∫...–î–∞–≤–∞–π –∫–∞ –±–µ–∑ –º–∞—Ç–∞!");
});

bot.hears(text.buttonStageStartText, async (ctx) => {
    const keyboard0 = new Keyboard().text(text.buttonStage0Text).resized();
    await ctx.reply(text.arrStageTexts[0], { reply_markup: keyboard0 });
    await ctx.replyWithPhoto(picture0);
});

bot.hears(text.buttonStage0Text, async (ctx) => {
    const keyboard1 = new Keyboard()
    .resized()
    .text(text.buttonStage1Text[0])
    .row()
    .text(text.buttonStage1Text[1])
    .row();
    await ctx.reply(text.arrStageTexts[1], { reply_markup: keyboard1 });
    await ctx.replyWithPhoto(picture1);
});

bot.hears(text.buttonStage1Text[0], async (ctx) => {
    const keyboard2 = new Keyboard()
    .resized()
    .text(text.buttonStage2Text[0])
    .row()
    .text(text.buttonStage2Text[1])
    .row()
    .text(text.buttonStage2Text[2])
    .row();
    await ctx.reply(text.arrStageTexts[2], { reply_markup: keyboard2 });
    await ctx.replyWithPhoto(picture2);
});

bot.hears(
    [text.buttonStage2Text[0], text.buttonStage2Text[1], text.buttonStage2Text[2], text.buttonStage1Text[1]],
    async (ctx) => {
        const chatId = ctx.chatId;
        
        const keyboard3 = new Keyboard().resized().text(text.buttonStage3Text).row();
        
        switch (ctx.message.text) {
            case text.buttonStage2Text[0]:
            objBag[chatId].push("–°—É—à–µ–Ω–æ–µ –∫—Ä—ã–ª–æ –õ–∏—Å–º–∞–≥–µ–Ω–∞ ü™Ω");
            break;
            case text.buttonStage2Text[1]:
            objBag[chatId].push("–ó–µ–ª—å–µ –∏–∑ —á–µ—à—É–∏ –ó–º–µ—Ä–æ–Ω–æ—Å–∞ üß™");
            break;
        }
        await ctx.reply(text.arrStageTexts[3], { reply_markup: keyboard3 });
        await ctx.replyWithPhoto(picture3);
    }
);

bot.hears(
    text.buttonStage3Text,
    async (ctx) => {
        const chatId = ctx.chatId;
        const keyboard4 = new Keyboard().resized().text(text.buttonStage4Text[0]).row().text(text.buttonStage4Text[1]).row();
        
        await ctx.reply(text.arrStageTexts[4], { reply_markup: keyboard4 });
        await ctx.replyWithPhoto(picture4);
    }
);

bot.hears(
    [text.buttonStage4Text[0],text.buttonStage4Text[1]],
    async (ctx) => {
        const chatId = ctx.chatId;
        const keyboard5 = new Keyboard().resized().text(text.buttonStage5Text).row()
        
        switch (ctx.message.text) {
            case text.buttonStage4Text[0]:
            await ctx.reply(text.arrStageTexts[5],{ reply_markup: keyboard5 }); break
            case text.buttonStage4Text[1]:
            await ctx.reply(text.arrStageTexts[6], { reply_markup: keyboard5 }); 
            --objCarmaPoints[chatId]
            console.log(`carma point on Jonim answer ${objCarmaPoints[chatId]}`) 
            break
        }
        
    }
);

bot.hears(
    text.buttonStage5Text,
    async (ctx) => {
        const chatId = ctx.chatId;
        const keyboard6 = new Keyboard().resized().text(text.buttonStage6Text[0]).row().text(text.buttonStage6Text[1]).row();
        
        await ctx.reply(text.arrStageTexts[7], { reply_markup: keyboard6 });
        await ctx.replyWithPhoto(picture5);
    }
);

bot.hears(
    [text.buttonStage6Text[0],text.buttonStage6Text[1]],
    async (ctx) => {
        const chatId = ctx.chatId;
        const keyboard7 = new Keyboard().resized().text(text.buttonStage7Text).row();
        
        if(ctx.message.text == text.buttonStage6Text[0]){
            objCarmaPoints[ctx.chatId]++; // –Ω–∞–¥–æ –±—É–¥–µ—Ç —É–¥–∞–ª–∏—Ç—å. –≠—Ç–æ —á–∏—Å—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
            console.log(`${objCarmaPoints[chatId]}`) }
            
            await ctx.reply(text.arrStageTexts[8], { reply_markup: keyboard7 });
            await ctx.replyWithPhoto(picture6);
        }
    );
    
    bot.hears(
        text.buttonStage7Text,
        async (ctx) => {
            const chatId = ctx.chatId;
            const keyboard8 = new Keyboard().resized().text(text.buttonStage8Text).row();
            
            
            await ctx.reply(text.arrStageTexts[9], { reply_markup: keyboard8 });
            await ctx.replyWithPhoto(picture7);
        }
    );
    
    bot.hears(
        text.buttonStage8Text,
        async (ctx) => {
            const chatId = ctx.chatId;
            const keyboard9 = new Keyboard().resized().text(text.buttonStage9Text).row();
            
            
            await ctx.reply(text.arrStageTexts[10], { reply_markup: keyboard9 });
            await ctx.replyWithPhoto(picture8);
        }
    );
    
    bot.hears(
        text.buttonStage9Text,
        async (ctx) => {
            const chatId = ctx.chatId;
            const keyboard10 = new Keyboard().resized().text(text.buttonStage10Text[0]).row().text(text.buttonStage10Text[1]).row();
            
            
            await ctx.reply(text.arrStageTexts[11], { reply_markup: keyboard10 });
            await ctx.replyWithPhoto(picture9);
        }
    );
    
    bot.hears(
        text.buttonStage10Text[0],
        async (ctx) => {
            const chatId = ctx.chatId;
            const keyboard11 = new Keyboard().resized().text(text.buttonStage11Text[0]).row().text(text.buttonStage11Text[1]).row();
            
            
            await ctx.reply(text.arrStageTexts[12], { reply_markup: keyboard11 });
            await ctx.replyWithPhoto(picture10);
        }
    );
    
    bot.hears(
        text.buttonStage11Text[0],
        async (ctx) => {
            const chatId = ctx.chatId;
            const keyboard12 = new Keyboard().resized().text(text.buttonStage12Text[0]).row().text(text.buttonStage12Text[1]).row();
            
            if(ctx.message.text == text.buttonStage11Text[0]){
                objBag[chatId].push("–ê–º—É–ª–µ—Ç üí†")
            }
            await ctx.reply(text.arrStageTexts[13], { reply_markup: keyboard12 });
        }
    );
    

        bot.hears(
        [text.buttonStage12Text[0],text.buttonStage12Text[1]],
        async (ctx) => {
            const chatId = ctx.chatId;
            const keyboard13 = new Keyboard().resized().text(text.buttonStage13Text[0]).row().text(text.buttonStage13Text[1]).row();
            
            
            
            await ctx.reply(text.arrStageTexts[14], { reply_markup: keyboard13 });
        }
    );
    




    
    bot.start();
    